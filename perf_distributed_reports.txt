1. remoting (6 clients, 150k messages):
client - 3-7% cpu, 7 mb, 6-10 threads
server - 26-36% cpu, 9 mb, 15-18 threads
time - 363 sec
- hard to write end to end tests
- hard to make handler generic
- requires Serializable attribute

2. ice (6 clients, 150k messages):
client - 1-5% cpu, 19.5 mb
server - 7-14% cpu, 26 mb
time - 377 sec

3. zeromq (6 clients, 150k messages):
client - 3-7% cpu, 9 mb, 6-10 threads
server - 18-22% cpu, 9 mb, 10-12 threads
time - 496 sec

4. thrift (6 clients, 150k messages):
client - 2-5% cpu, 8 mb, 4-7 threads
server - 17-32% cpu, 9.5 mb, 11-14 threads
time - 610 sec

5. netmq (6 clients, 150k messages):
client - 3-8% cpu, 11 mb
server - 19-24% cpu, 11 mb
time - 474 sec

6. zyan (6 clients, 150k messages):
client - 4-8% cpu, 7.5 mb
server - 30-42% cpu, 9 mb
time - 635 sec

7. wcf (6 clients, 150k messages):
client - 4-9% cpu, 11 mb
server - 20-30% cpu, 15 mb
time - 2615 sec
- requires Serializable attribute
- requires service attibutes

8. msmq (too slow for simple cases - 10k messages in one client) - creating temporary queues is very expensive - finally removed
