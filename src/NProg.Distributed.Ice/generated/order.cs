// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `order.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace Order
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class OrderDto : Ice.ObjectImpl
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string orderId;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public int count;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public long orderDate;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public double unitPrice;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string userName;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public OrderDto()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public OrderDto(string orderId, int count, long orderDate, double unitPrice, string userName)
        {
            this.orderId = orderId;
            this.count = count;
            this.orderDate = orderDate;
            this.unitPrice = unitPrice;
            this.userName = userName;
        }

        #endregion

        #region Slice type-related members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Order::OrderDto"
        };

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override string[] ice_ids()
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override string ice_id()
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.writeString(orderId);
            os__.writeInt(count);
            os__.writeLong(orderDate);
            os__.writeDouble(unitPrice);
            os__.writeString(userName);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            orderId = is__.readString();
            count = is__.readInt();
            orderDate = is__.readLong();
            unitPrice = is__.readDouble();
            userName = is__.readString();
            is__.endReadSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface OrderService : Ice.Object, OrderServiceOperations_, OrderServiceOperationsNC_
    {
    }
}

namespace Order
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_OrderService_Add();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_OrderService_Get(Order.OrderDto ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_OrderService_Remove(bool ret__);
}

namespace Order
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface OrderDtoPrx : Ice.ObjectPrx
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface OrderServicePrx : Ice.ObjectPrx
    {
        void Add(string orderId, Order.OrderDto order);
        void Add(string orderId, Order.OrderDto order, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Order.Callback_OrderService_Add> begin_Add(string orderId, Order.OrderDto order);
        Ice.AsyncResult<Order.Callback_OrderService_Add> begin_Add(string orderId, Order.OrderDto order, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_Add(string orderId, Order.OrderDto order, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_Add(string orderId, Order.OrderDto order, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_Add(Ice.AsyncResult r__);

        Order.OrderDto Get(string orderId);
        Order.OrderDto Get(string orderId, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Order.Callback_OrderService_Get> begin_Get(string orderId);
        Ice.AsyncResult<Order.Callback_OrderService_Get> begin_Get(string orderId, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_Get(string orderId, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_Get(string orderId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Order.OrderDto end_Get(Ice.AsyncResult r__);

        bool Remove(string orderId);
        bool Remove(string orderId, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Order.Callback_OrderService_Remove> begin_Remove(string orderId);
        Ice.AsyncResult<Order.Callback_OrderService_Remove> begin_Remove(string orderId, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_Remove(string orderId, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_Remove(string orderId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_Remove(Ice.AsyncResult r__);
    }
}

namespace Order
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface OrderServiceOperations_
    {
        void Add(string orderId, Order.OrderDto order, Ice.Current current__);

        Order.OrderDto Get(string orderId, Ice.Current current__);

        bool Remove(string orderId, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface OrderServiceOperationsNC_
    {
        void Add(string orderId, Order.OrderDto order);

        Order.OrderDto Get(string orderId);

        bool Remove(string orderId);
    }
}

namespace Order
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class OrderDtoPrxHelper : Ice.ObjectPrxHelperBase, OrderDtoPrx
    {
        #region Asynchronous operations

        #endregion

        #region Checked and unchecked cast operations

        public static OrderDtoPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            OrderDtoPrx r = b as OrderDtoPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                OrderDtoPrxHelper h = new OrderDtoPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static OrderDtoPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            OrderDtoPrx r = b as OrderDtoPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                OrderDtoPrxHelper h = new OrderDtoPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static OrderDtoPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    OrderDtoPrxHelper h = new OrderDtoPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static OrderDtoPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    OrderDtoPrxHelper h = new OrderDtoPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static OrderDtoPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            OrderDtoPrx r = b as OrderDtoPrx;
            if(r == null)
            {
                OrderDtoPrxHelper h = new OrderDtoPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static OrderDtoPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            OrderDtoPrxHelper h = new OrderDtoPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Order::OrderDto"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new OrderDtoDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new OrderDtoDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, OrderDtoPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static OrderDtoPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                OrderDtoPrxHelper result = new OrderDtoPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class OrderServicePrxHelper : Ice.ObjectPrxHelperBase, OrderServicePrx
    {
        #region Synchronous operations

        public void Add(string orderId, Order.OrderDto order)
        {
            Add(orderId, order, null, false);
        }

        public void Add(string orderId, Order.OrderDto order, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Add(orderId, order, context__, true);
        }

        private void Add(string orderId, Order.OrderDto order, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __Add_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        OrderServiceDel_ del__ = (OrderServiceDel_)delBase__;
                        del__.Add(orderId, order, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Order.OrderDto Get(string orderId)
        {
            return Get(orderId, null, false);
        }

        public Order.OrderDto Get(string orderId, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return Get(orderId, context__, true);
        }

        private Order.OrderDto Get(string orderId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __Get_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__Get_name);
                        delBase__ = getDelegate__(false);
                        OrderServiceDel_ del__ = (OrderServiceDel_)delBase__;
                        return del__.Get(orderId, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public bool Remove(string orderId)
        {
            return Remove(orderId, null, false);
        }

        public bool Remove(string orderId, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return Remove(orderId, context__, true);
        }

        private bool Remove(string orderId, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __Remove_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__Remove_name);
                        delBase__ = getDelegate__(false);
                        OrderServiceDel_ del__ = (OrderServiceDel_)delBase__;
                        return del__.Remove(orderId, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Order.Callback_OrderService_Add> begin_Add(string orderId, Order.OrderDto order)
        {
            return begin_Add(orderId, order, null, false, null, null);
        }

        public Ice.AsyncResult<Order.Callback_OrderService_Add> begin_Add(string orderId, Order.OrderDto order, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_Add(orderId, order, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_Add(string orderId, Order.OrderDto order, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Add(orderId, order, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_Add(string orderId, Order.OrderDto order, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Add(orderId, order, ctx__, true, cb__, cookie__);
        }

        private const string __Add_name = "Add";

        public void end_Add(Ice.AsyncResult r__)
        {
            end__(r__, __Add_name);
        }

        private Ice.AsyncResult<Order.Callback_OrderService_Add> begin_Add(string orderId, Order.OrderDto order, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Order.Callback_OrderService_Add> result__ = new IceInternal.OnewayOutgoingAsync<Order.Callback_OrderService_Add>(this, __Add_name, Add_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__Add_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(orderId);
                os__.writeObject(order);
                os__.writePendingObjects();
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void Add_completed__(Order.Callback_OrderService_Add cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Order.Callback_OrderService_Get> begin_Get(string orderId)
        {
            return begin_Get(orderId, null, false, null, null);
        }

        public Ice.AsyncResult<Order.Callback_OrderService_Get> begin_Get(string orderId, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_Get(orderId, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_Get(string orderId, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Get(orderId, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_Get(string orderId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Get(orderId, ctx__, true, cb__, cookie__);
        }

        private const string __Get_name = "Get";

        public Order.OrderDto end_Get(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __Get_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Order.OrderDto ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                IceInternal.ParamPatcher<Order.OrderDto> ret__PP = new IceInternal.ParamPatcher<Order.OrderDto>(Order.OrderDto.ice_staticId());
                is__.readObject(ret__PP);
                is__.readPendingObjects();
                outAsync__.endReadParams__();
                ret__ = ret__PP.value;
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Order.Callback_OrderService_Get> begin_Get(string orderId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__Get_name);
            IceInternal.TwowayOutgoingAsync<Order.Callback_OrderService_Get> result__ =  new IceInternal.TwowayOutgoingAsync<Order.Callback_OrderService_Get>(this, __Get_name, Get_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__Get_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(orderId);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void Get_completed__(Ice.AsyncResult r__, Order.Callback_OrderService_Get cb__, Ice.ExceptionCallback excb__)
        {
            Order.OrderDto ret__;
            try
            {
                ret__ = end_Get(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Order.Callback_OrderService_Remove> begin_Remove(string orderId)
        {
            return begin_Remove(orderId, null, false, null, null);
        }

        public Ice.AsyncResult<Order.Callback_OrderService_Remove> begin_Remove(string orderId, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_Remove(orderId, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_Remove(string orderId, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Remove(orderId, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_Remove(string orderId, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Remove(orderId, ctx__, true, cb__, cookie__);
        }

        private const string __Remove_name = "Remove";

        public bool end_Remove(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __Remove_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                bool ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readBool();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Order.Callback_OrderService_Remove> begin_Remove(string orderId, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__Remove_name);
            IceInternal.TwowayOutgoingAsync<Order.Callback_OrderService_Remove> result__ =  new IceInternal.TwowayOutgoingAsync<Order.Callback_OrderService_Remove>(this, __Remove_name, Remove_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__Remove_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(orderId);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void Remove_completed__(Ice.AsyncResult r__, Order.Callback_OrderService_Remove cb__, Ice.ExceptionCallback excb__)
        {
            bool ret__;
            try
            {
                ret__ = end_Remove(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static OrderServicePrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            OrderServicePrx r = b as OrderServicePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                OrderServicePrxHelper h = new OrderServicePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static OrderServicePrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            OrderServicePrx r = b as OrderServicePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                OrderServicePrxHelper h = new OrderServicePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static OrderServicePrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    OrderServicePrxHelper h = new OrderServicePrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static OrderServicePrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    OrderServicePrxHelper h = new OrderServicePrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static OrderServicePrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            OrderServicePrx r = b as OrderServicePrx;
            if(r == null)
            {
                OrderServicePrxHelper h = new OrderServicePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static OrderServicePrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            OrderServicePrxHelper h = new OrderServicePrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Order::OrderService"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new OrderServiceDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new OrderServiceDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, OrderServicePrx v__)
        {
            os__.writeProxy(v__);
        }

        public static OrderServicePrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                OrderServicePrxHelper result = new OrderServicePrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Order
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface OrderDtoDel_ : Ice.ObjectDel_
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface OrderServiceDel_ : Ice.ObjectDel_
    {
        void Add(string orderId, Order.OrderDto order, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Order.OrderDto Get(string orderId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        bool Remove(string orderId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
    }
}

namespace Order
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class OrderDtoDelM_ : Ice.ObjectDelM_, OrderDtoDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class OrderServiceDelM_ : Ice.ObjectDelM_, OrderServiceDel_
    {
        public void Add(string orderId, Order.OrderDto order, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("Add", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(orderId);
                    os__.writeObject(order);
                    os__.writePendingObjects();
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Order.OrderDto Get(string orderId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("Get", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(orderId);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Order.OrderDto ret__;
                    IceInternal.ParamPatcher<Order.OrderDto> ret__PP = new IceInternal.ParamPatcher<Order.OrderDto>(Order.OrderDto.ice_staticId());
                    is__.readObject(ret__PP);
                    is__.readPendingObjects();
                    og__.endReadParams();
                    ret__ = ret__PP.value;
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public bool Remove(string orderId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("Remove", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(orderId);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    bool ret__;
                    ret__ = is__.readBool();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace Order
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class OrderDtoDelD_ : Ice.ObjectDelD_, OrderDtoDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class OrderServiceDelD_ : Ice.ObjectDelD_, OrderServiceDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void Add(string orderId, Order.OrderDto order, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "Add", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                OrderService servant__ = null;
                try
                {
                    servant__ = (OrderService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.Add(orderId, order, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Order.OrderDto Get(string orderId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "Get", Ice.OperationMode.Normal, context__);
            Order.OrderDto result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                OrderService servant__ = null;
                try
                {
                    servant__ = (OrderService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.Get(orderId, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public bool Remove(string orderId, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "Remove", Ice.OperationMode.Normal, context__);
            bool result__ = false;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                OrderService servant__ = null;
                try
                {
                    servant__ = (OrderService)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.Remove(orderId, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }
    }
}

namespace Order
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public abstract class OrderServiceDisp_ : Ice.ObjectImpl, OrderService
    {
        #region Slice operations

        public void Add(string orderId, Order.OrderDto order)
        {
            Add(orderId, order, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void Add(string orderId, Order.OrderDto order, Ice.Current current__);

        public Order.OrderDto Get(string orderId)
        {
            return Get(orderId, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract Order.OrderDto Get(string orderId, Ice.Current current__);

        public bool Remove(string orderId)
        {
            return Remove(orderId, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract bool Remove(string orderId, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Order::OrderService"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus Add___(OrderService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string orderId;
            orderId = is__.readString();
            IceInternal.ParamPatcher<Order.OrderDto> order__PP = new IceInternal.ParamPatcher<Order.OrderDto>(Order.OrderDto.ice_staticId());
            is__.readObject(order__PP);
            is__.readPendingObjects();
            inS__.endReadParams();
            obj__.Add(orderId, order__PP.value, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus Get___(OrderService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string orderId;
            orderId = is__.readString();
            inS__.endReadParams();
            Order.OrderDto ret__ = obj__.Get(orderId, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeObject(ret__);
            os__.writePendingObjects();
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus Remove___(OrderService obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string orderId;
            orderId = is__.readString();
            inS__.endReadParams();
            bool ret__ = obj__.Remove(orderId, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeBool(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "Add",
            "Get",
            "Remove",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return Add___(this, inS__, current__);
                }
                case 1:
                {
                    return Get___(this, inS__, current__);
                }
                case 2:
                {
                    return Remove___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 5:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 6:
                {
                    return ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }
}
